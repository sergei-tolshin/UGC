@startuml
!theme mars
'схема основана на C4_Context. Guide по работе с ней тут -> https://crashedmind.github.io/PlantUMLHitchhikersGuide/C4/C4Stdlib.html
!include https://raw.githubusercontent.com/kirchsth/C4-PlantUML/extended/C4_Container.puml
LAYOUT_LANDSCAPE()


title Архитектура онлайн кинотеатра

Person(Admin, "Администратор портала")
Person(Customer, "Пользователь")
Person(DataAnalyst, "Аналитик данных")

System_Boundary(OnlineCinemaBackend, "Backend онлайн кинотеатра") {


  Boundary(ETL, "ETL Service") {
    System(ETLProcess, "ETL Process")
  }

  Boundary(AsyncAPIService, "Async API Service ") {
    Container(AsyncAPI, "Async API", "FastAPI application")
    ContainerDb(APICache, "Redis Cache", "Cache customer's requests")
    ContainerDb(ElasticDB, "ElasticSearch container")
  }
  Boundary(AdminPanelBlock, "Admin Panel Service") {
    ContainerDb(PostgreSQL, "Movies PostgreSQL")
    Container(AdminPanelService, "Admin Panel Service", "Django application")
  }

  Boundary(AuthService, "Auth Service") {
    Container(Auth, "Auth", "flask application")
    ContainerDb(AuthRedisCache, "Redis Cache", "Stores refresh and inactive tokens")
    ContainerDb(AuthDB, "Auth DB", "PostgreSQL", "Stores users, sessions,roles and permissions")
    ContainerDb(OAuth, "OAuth2.0", "", "Stores users, sessions,roles and permissions")
  }
  Boundary(UGS, "UGS Service") {
    Container(UGC_ETL, "UGC_ETL", "python application")
    Container(UGC_API, "UGC_API", "Api for ugc content")
    ContainerDb(ClickHouse, "ClickHouse Storage", "Stores data for analytics")
    ContainerDb(Kafka, "Kafka", "Receive and transmit data")
  }
}

Container(UserApp, "UserApp", "Mobile app, frontend app or smart_tv")

'Взаимодействие администратора
Rel_U(Admin, AdminPanelService, "Администратор управляет контентом")
Rel(AdminPanelService, PostgreSQL, "Запись и обновление данных")


'ETL процесс
Rel_L(ETLProcess, PostgreSQL, "Получение нового/обновленного контента")
Rel_L(ETLProcess, ElasticDB, "Запись данных о фильме")


'Взаимодействие API с хранилищами
Rel_R(Customer, UserApp, "Запрос на контент")
Rel_L(UserApp, Auth, "Регистрация и аутентификация")
Rel_L(UserApp, UGC_API, "Отправка данных о действиях пользователя")
Rel_L(UserApp, AsyncAPI, "Запрос на контент")

Rel_L(AsyncAPI, Auth, "Авторизация и аутентификация gRCP")
Rel_R(AsyncAPI, APICache, "Получение/запись данных из(в) кеша")
Rel_D(AsyncAPI, ElasticDB, "Получение данных из ElastecSearch")

Rel_L(Auth, AuthDB, "запись/получение данных о пользователе")
Rel_D(Auth, AuthRedisCache, "Получение/запись данных из(в) кеша")
Rel_L(Auth, OAuth, "Авторизация через сторонние сервисы")
'UGS сервис
Rel_R(UGC_API, Kafka, "Отправка полученных данных")
Rel_R(UGC_ETL, Kafka, "Получение данных")
Rel_L(UGC_ETL, ClickHouse, "Отправка обработанных данных")
Rel_R(DataAnalyst, ClickHouse, "Получает данные из аналитического хранилища")
@enduml